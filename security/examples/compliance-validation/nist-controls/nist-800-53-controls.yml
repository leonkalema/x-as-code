---
# NIST SP 800-53 Rev. 5 Controls Implementation

# Access Control (AC)
access_control:
  # AC-2: Account Management
  ac_2:
    title: Account Management
    description: Implement automated account management for system accounts
    implementation:
      # Using Terraform to manage IAM roles and policies
      aws:
        resource: iam_role
        file: /iam-as-code/aws/main.tf
        details: |
          - Automated IAM role and policy creation through Terraform
          - Enforced least privilege by limiting permissions to what's necessary
          - Implemented permissions boundaries
      kubernetes:
        resource: rbac
        file: /iam-as-code/kubernetes/rbac.yaml
        details: |
          - RBAC roles and bindings defined as code
          - Implemented role-based access using service accounts
          - Limited permissions based on job function (developer, operator, admin)

  # AC-3: Access Enforcement
  ac_3:
    title: Access Enforcement
    description: Enforce approved authorizations for logical access
    implementation:
      aws:
        resources:
          - iam_policy
          - security_group
        files:
          - /iam-as-code/aws/main.tf
          - /network-policies/aws-security-groups/main.tf
        details: |
          - Explicit deny policies for sensitive actions
          - Security groups with restrictive ingress/egress rules
          - Network ACLs that deny unauthorized traffic
      kubernetes:
        resources:
          - NetworkPolicy
          - RoleBinding
        files:
          - /network-policies/kubernetes/microservices-policies.yaml
          - /iam-as-code/kubernetes/rbac.yaml
        details: |
          - Network policies restricting pod-to-pod communication
          - RBAC enforcement for API access
          - PodSecurityPolicies for enforcing security contexts

  # AC-4: Information Flow Enforcement
  ac_4:
    title: Information Flow Enforcement
    description: Control information flows between systems
    implementation:
      aws:
        resources:
          - security_group
          - network_acl
        file: /network-policies/aws-security-groups/main.tf
        details: |
          - Tiered security groups (load balancer, application, database)
          - Explicit egress rules limiting outbound communication
          - VPC endpoints for private service access
      kubernetes:
        resource: NetworkPolicy
        file: /network-policies/kubernetes/microservices-policies.yaml
        details: |
          - Default deny policy with explicit allow rules
          - Namespace isolation with ingress/egress controls
          - Service mesh authorization policies

# Audit and Accountability (AU)
audit_accountability:
  # AU-2: Audit Events
  au_2:
    title: Audit Events
    description: Identify events that require auditing
    implementation:
      aws:
        resources:
          - cloudtrail
          - config
        files:
          - /compliance-validation/aws-config/main.tf
        details: |
          - CloudTrail enabled for all regions
          - AWS Config recording all resource changes
          - VPC Flow Logs capturing network traffic
      kubernetes:
        resources:
          - audit_policy
        details: |
          - Kubernetes API server audit logging
          - Pod-level logging with centralized collection
          - Webhook admission controllers for validation

  # AU-6: Audit Review, Analysis, and Reporting
  au_6:
    title: Audit Review, Analysis, and Reporting
    description: Review and analyze system audit records for inappropriate activity
    implementation:
      aws:
        resources:
          - cloudwatch
          - guardduty
        file: /compliance-validation/aws-config/main.tf
        details: |
          - CloudWatch Alarms for suspicious activity
          - GuardDuty for threat detection
          - Security Hub for compliance reporting
      kubernetes:
        resources:
          - prometheus
          - alertmanager
        details: |
          - Centralized audit log collection and analysis
          - Real-time alerting on suspicious activities
          - Compliance dashboards for visualization

# Configuration Management (CM)
configuration_management:
  # CM-2: Baseline Configuration
  cm_2:
    title: Baseline Configuration
    description: Establish and maintain baseline configurations
    implementation:
      aws:
        resources:
          - terraform_module
        files:
          - /iam-as-code/aws/main.tf
          - /network-policies/aws-security-groups/main.tf
        details: |
          - Infrastructure as Code templates defining secure baselines
          - Version-controlled configuration files
          - Immutable infrastructure patterns
      kubernetes:
        resources:
          - namespace
          - pod_security_policy
        files:
          - /iam-as-code/kubernetes/rbac.yaml
          - /network-policies/kubernetes/default-deny.yaml
        details: |
          - Default security contexts for pods
          - Namespace-level resource quotas and limits
          - Standard network policies

  # CM-7: Least Functionality
  cm_7:
    title: Least Functionality
    description: Configure systems to provide only essential capabilities
    implementation:
      aws:
        resources:
          - iam_policy
          - security_group
        file: /iam-as-code/aws/main.tf
        details: |
          - IAM policies with least privilege
          - Security groups allowing only required ports
          - Services deployed with minimal permissions
      kubernetes:
        resources:
          - network_policy
          - seccomp_profile
        files:
          - /iam-as-code/kubernetes/rbac.yaml
          - /compliance-validation/opa-constraints/kubernetes-constraints.yaml
        details: |
          - Container seccomp profiles
          - Resource limitation through OPA policy
          - Container security contexts with minimal capabilities

# Identification and Authentication (IA)
identification_authentication:
  # IA-2: Identification and Authentication (Organizational Users)
  ia_2:
    title: Identification and Authentication (Organizational Users)
    description: Uniquely identify and authenticate organizational users
    implementation:
      aws:
        resources:
          - iam_user
          - iam_role
        file: /iam-as-code/aws/main.tf
        details: |
          - IAM roles with federated identity
          - MFA enforcement for console access
          - Temporary credentials for programmatic access
      kubernetes:
        resources:
          - service_account
          - rbac
        file: /iam-as-code/kubernetes/rbac.yaml
        details: |
          - OIDC integration for user authentication
          - Service accounts with limited permissions
          - Pod identity management

# System and Communications Protection (SC)
system_communications_protection:
  # SC-7: Boundary Protection
  sc_7:
    title: Boundary Protection
    description: Monitor and control communications at external boundaries
    implementation:
      aws:
        resources:
          - security_group
          - waf
        file: /network-policies/aws-security-groups/main.tf
        details: |
          - WAF rules for application layer protection
          - Security groups restricting traffic flow
          - VPC design with public/private subnets
      kubernetes:
        resources:
          - network_policy
          - ingress
        file: /network-policies/kubernetes/default-deny.yaml
        details: |
          - Network policies for cluster segmentation
          - Ingress controllers with TLS termination
          - Service mesh for east-west traffic control

  # SC-8: Transmission Confidentiality and Integrity
  sc_8:
    title: Transmission Confidentiality and Integrity
    description: Protect the confidentiality and integrity of transmitted information
    implementation:
      aws:
        resources:
          - acm
          - cloudfront
        details: |
          - TLS certificates for all endpoints
          - Secure transit with VPC endpoints
          - Data encryption in transit
      kubernetes:
        resources:
          - service_mesh
          - tls_secrets
        files:
          - /compliance-validation/opa-constraints/kubernetes-constraints.yaml
        details: |
          - mTLS between all services
          - Network policies enforcing secure communications
          - TLS certificate rotation

  # SC-13: Cryptographic Protection
  sc_13:
    title: Cryptographic Protection
    description: Implement approved cryptographic mechanisms
    implementation:
      aws:
        resources:
          - kms
          - s3_encryption
        file: /secret-management/aws-secrets-manager/main.tf
        details: |
          - KMS for key management
          - S3 bucket encryption
          - RDS storage encryption
      kubernetes:
        resources:
          - secrets
          - sealed_secrets
        file: /secret-management/kubernetes-external-secrets/secret-store.yaml
        details: |
          - External Secrets Operator integration
          - Sealed Secrets for GitOps
          - Vault integration for dynamic secrets

# System and Information Integrity (SI)
system_information_integrity:
  # SI-4: Information System Monitoring
  si_4:
    title: Information System Monitoring
    description: Monitor the information system to detect attacks and unauthorized activities
    implementation:
      aws:
        resources:
          - guardduty
          - cloudtrail
        file: /compliance-validation/aws-config/main.tf
        details: |
          - GuardDuty for threat detection
          - CloudTrail for API activity monitoring
          - VPC Flow Logs for network monitoring
      kubernetes:
        resources:
          - falco
          - prometheus
        details: |
          - Runtime security monitoring with Falco
          - Prometheus alerting for anomalies
          - Admission controllers for policy enforcement

  # SI-7: Software, Firmware, and Information Integrity
  si_7:
    title: Software, Firmware, and Information Integrity
    description: Employ integrity verification tools
    implementation:
      aws:
        resources:
          - ecr_scan
          - lambda_code_signing
        details: |
          - ECR image scanning
          - Lambda code signing
          - S3 object integrity checking
      kubernetes:
        resources:
          - image_policy
          - admission_webhook
        files:
          - /container-scanning/k8s-admission-controller/webhook.yaml
          - /compliance-validation/opa-constraints/kubernetes-constraints.yaml
        details: |
          - Container image scanning before deployment
          - Admission webhooks validating configurations
          - OPA Gatekeeper enforcing security policies
