name: Container Image Security Scan

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - '.github/workflows/trivy-scan.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'

jobs:
  build-and-scan:
    name: Build and scan container image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write  # For GitHub Code Scanning
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: myapp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'myapp:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()  # This ensures the results are uploaded even if Trivy finds vulnerabilities
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Fail if vulnerabilities were found
        if: ${{ failure() && steps.trivy.outcome == 'failure' }}
        run: |
          echo "::error::Security vulnerabilities were found in the container image!"
          exit 1
          
  scan-policy-check:
    name: Container policy validation
    runs-on: ubuntu-latest
    needs: build-and-scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install OPA
        run: |
          curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v0.48.0/opa_linux_amd64
          chmod 755 ./opa
          
      - name: Extract Dockerfile details
        id: dockerfile-extract
        run: |
          echo "DOCKERFILE=$(cat Dockerfile)" >> $GITHUB_ENV
          
      - name: Run policy checks
        run: |
          cat > dockerfile.json << EOF
          {
            "dockerfile": "${{ env.DOCKERFILE }}"
          }
          EOF
          
          cat > dockerfile-policy.rego << EOF
          package dockerfile
          
          deny[msg] {
            not contains(input.dockerfile, "USER")
            msg = "Dockerfile must specify a non-root USER instruction"
          }
          
          deny[msg] {
            not contains(input.dockerfile, "HEALTHCHECK")
            msg = "Dockerfile should include a HEALTHCHECK instruction"
          }
          
          deny[msg] {
            contains(input.dockerfile, "FROM") 
            contains(input.dockerfile, "latest")
            msg = "Dockerfile should not use 'latest' tag for base images"
          }
          EOF
          
          ./opa eval --format pretty --data dockerfile-policy.rego --input dockerfile.json "data.dockerfile.deny"
